use std::collections::HashSet;

fn valid_sudoku(board: Vec<Vec<char>>) -> bool {
    let mut lines: Vec<HashSet<char>> = vec![HashSet::new(); board.len()];
    let mut columns: Vec<HashSet<char>> = vec![HashSet::new(); board.len()];
    let mut squares: Vec<HashSet<char>> = vec![HashSet::new(); board.len() / 3 + (3 * board.len() / 3)];

    for (i, line) in board.iter().enumerate() {
        for (j, c) in line.iter().enumerate() {
            if *c != '.' {
                if !(lines[i].insert(*c) && columns[j].insert(*c) && squares[i / 3 + (3 * (j / 3))].insert(*c)) {
                    return false
                }
            }   
        }
    }

    true
}


fn main() {
    println!("Hello, world!");
    let sudoku = vec![
        vec!['5','3','.','.','7','.','.','.','.'],
        vec!['6','.','.','1','9','5','.','.','.'],
        vec!['.','9','8','.','.','.','.','6','.'],
        vec!['8','.','.','.','6','.','.','.','3'],
        vec!['4','.','.','8','.','3','.','.','1'],
        vec!['7','.','.','.','2','.','.','.','6'],
        vec!['.','6','.','.','.','.','2','8','.'],
        vec!['.','.','.','4','1','9','.','.','5'],
        vec!['.','.','.','.','8','.','.','7','9']
    ];

    let board = vec![
    vec!['8','3','.','.','7','.','.','.','.'],
    vec!['6','.','.','1','9','5','.','.','.'],
    vec!['.','9','8','.','.','.','.','6','.'],
    vec!['8','.','.','.','6','.','.','.','3'],
    vec!['4','.','.','8','.','3','.','.','1'],
    vec!['7','.','.','.','2','.','.','.','6'],
    vec!['.','6','.','.','.','.','2','8','.'],
    vec!['.','.','.','4','1','9','.','.','5'],
    vec!['.','.','.','.','8','.','.','7','9']];

    let test = vec![
        vec!['.','8','7','6','5','4','3','2','1'],
        vec!['2','.','.','.','.','.','.','.','.'],
        vec!['3','.','.','.','.','.','.','.','.'],
        vec!['4','.','.','.','.','.','.','.','.'],
        vec!['5','.','.','.','.','.','.','.','.'],
        vec!['6','.','.','.','.','.','.','.','.'],
        vec!['7','.','.','.','.','.','.','.','.'],
        vec!['8','.','.','.','.','.','.','.','.'],
        vec!['9','.','.','.','.','.','.','.','.']
    ];

    assert!(valid_sudoku(sudoku) == true);
    assert!(valid_sudoku(board) == false);
    assert!(valid_sudoku(test) == true);
}
